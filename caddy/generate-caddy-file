#!/usr/bin/env python3
from mako.template import Template
from os import chdir
from os.path import dirname, realpath


def model_documentation_2019():
    paths = ["HPV-Harvard-Kim",
             "HPV-LSHTM-Jit",
             "HepB-CDA-Razavi",
             "HepB-IC-Hallett",
             "HepB-Li",
             "HibPCV-JHU-Tam",
             "HibPCV-LSHTM-Clark",
             "JE-OUCRU-Clapham",
             "JE-UND-Moore",
             "Measles-LSHTM-Jit",
             "Measles-PSU-Ferrari",
             "MenA-Cambridge-Trotter",
             "MenA-KPW-Jackson",
             "Rota-Emory-Lopman",
             "Rota-LSHTM-Clark",
             "Rubella-JHU-Lessler",
             "Rubella-PHE-Vynnycky",
             "YF-IC-Garske",
             "YF-UND-Perkins"]

    def disease_from_path(p):
        disease = p.split("-", 1)[0]
        return "Hib" if disease == "HibPCV" else disease

    return {"root": "/model-documentation/2019",
            "paths": [(p, disease_from_path(p)) for p in paths]}


def estimate_comparison_201810():
    paths = ["HepB",
             "Hib",
             "HPV",
             "JE",
             "Measles",
             "MenA",
             "PCV",
             "Rota",
             "Rubella",
             "YF"]
    return {"root": "/estimate-comparison/201810",
            "paths": [(p, p) for p in paths]}


jwt_template = """
jwt {
    path ${root}/${path}/
    allow ${claim} true
    publickey /public_key.pem
}
"""


def expand_template(subs):
    template = Template(jwt_template)
    rules = ""
    for path, claim in subs["paths"]:
        rules += template.render(path=path, claim=claim, root=subs["root"])
    return rules


def generate_caddyfile(template_path, target_path):
    print("Templating from {} to {}".format(template_path, target_path))
    with open(template_path, 'r') as f:
        template = Template(f.read())
    jwt_rules = \
        expand_template(model_documentation_2019()) + \
        expand_template(estimate_comparison_201810())
    with open(target_path, 'w') as f:
        f.write(template.render(jwt_rules=jwt_rules))


if __name__ == "__main__":
    # Set working directory to this script's dir
    chdir(dirname(realpath(__file__)))
    generate_caddyfile("Caddyfile.template", "Caddyfile")
